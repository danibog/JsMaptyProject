const form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation");class Workout{date=new Date;id=(Date.now()+"").slice(-10);constructor(t,o,e){this.coords=t,this.distance=o,this.duration=e}_setDescription(){this.description=`${this.type[0].toUpperCase()}${this.type.slice(1)} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}}class Running extends Workout{type="running";icon="üèÉ‚Äç‚ôÇÔ∏è";constructor(t,o,e,n){super(t,o,e),this.cadence=n,this.calcPace(),this._setDescription()}calcPace(){return this.pace=this.duration/this.distance,this.pace}}class Cycling extends Workout{icon="üö¥‚Äç‚ôÄÔ∏è";type="cycling";constructor(t,o,e,n){super(t,o,e),this.elevationGain=n,this.calcSpeed(),this._setDescription()}calcSpeed(){return this.speed=this.distance/(this.duration/60),this.speed}}class App{mapEvent;map;workout=[];zoomLevel=13;constructor(){this._getPosition(),this._getLocalStorage(),form.addEventListener("submit",this._newWorkout.bind(this)),inputType.addEventListener("change",this._toggleElevationField),containerWorkouts.addEventListener("click",this._moveToPopup.bind(this))}_getLocalStorage(){const t=JSON.parse(localStorage.getItem("workouts"));t&&(this.workout=t,this.workout.forEach((t=>{this._renderWorkout(t)})))}_getPosition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),this._checkLocationOn.bind(this))}_checkLocationOn(){alert("Could not get your postion"),setTimeout((()=>{this._getPosition()}),2e3)}_loadMap(t){const{latitude:o,longitude:e}=t.coords,n=[o,e];this.map=L.map("map").setView(n,this.zoomLevel),L.tileLayer("https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.map),this.map.on("click",this._showForm.bind(this)),this.workout.forEach((t=>{this._renderWorkoutMarker(t)}))}_showForm(t){this.mapEvent=t,form.classList.remove("hidden"),inputDistance.focus()}_hideForm(){inputDistance.value=inputElevation.value=inputCadence.value=inputDuration.value="",form.style.display="none",setTimeout((()=>{form.style.display="grid"}),1e3),form.classList.add("hidden")}_toggleElevationField(){inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden")}_newWorkout(t){const o=(...t)=>t.every((t=>Number.isFinite(t))),e=(...t)=>t.every((t=>t>0));t.preventDefault();const n=inputType.value,s=+inputDistance.value,i=+inputDuration.value,{lat:a,lng:r}=this.mapEvent.latlng,c=[a,r];let u;if("running"==n){const t=+inputCadence.value;if(!o(s,i,t)||!e(s,i,t))return alert("Inputs have to be positive number");u=new Running(c,s,i,t)}if("cycling"==n){const t=+inputElevation.value;if(!o(s,i,t)||!e(s,i))return alert("Inputs have to be positive number");u=new Cycling(c,s,i,t)}this.workout.push(u),this._renderWorkoutMarker(u),this._renderWorkout(u),this._moveToView(u.coords,this.zoomLevel),this._hideForm(),this._setLocalStorage()}_renderWorkoutMarker(t){const o={maxWidth:250,minWidth:100,autoClose:!1,closeOnClick:!1,className:`${t.type}-popup`};L.marker(t.coords).addTo(this.map).bindPopup(L.popup(o)).setPopupContent(`${t.icon} ${t.description}`).openPopup()}_renderWorkout(t){let o;o=` <li class="workout workout--${t.type}" data-id=${t.id}>\n        <h2 class="workout__title">${t.description}</h2>\n        <div class="workout__details">\n            <span class="workout__icon">${t.icon} </span>\n            <span class="workout__value">${t.distance}</span>\n            <span class="workout__unit">km</span>\n        </div>\n        <div class="workout__details">\n            <span class="workout__icon">‚è±</span>\n            <span class="workout__value">${t.duration}</span>\n            <span class="workout__unit">min</span>\n        </div>`,"running"==t.type&&(o+=`<div class="workout__details">\n                <span class="workout__icon">‚ö°Ô∏è</span>\n                <span class="workout__value">${t.pace.toFixed(1)}\n                </span>\n                <span class="workout__unit">min/km</span>\n            </div>\n            <div class="workout__details">\n                <span class="workout__icon">ü¶∂üèº</span>\n                <span class="workout__value">${t.cadence}</span>\n                <span class="workout__unit">spm</span>\n            </div>\n        </li>\n        `),"cycling"==t.type&&(o+=`\n            <div class="workout__details">\n                <span class="workout__icon">‚ö°Ô∏è</span>\n                <span class="workout__value">${t.speed.toFixed(1)}</span>\n                <span class="workout__unit">km/h</span>\n            </div>\n            <div class="workout__details">\n                <span class="workout__icon">‚õ∞</span>\n                <span class="workout__value">${t.elevationGain}</span>\n                <span class="workout__unit">min</span>\n            </div>\n        </li>`),form.insertAdjacentHTML("afterend",o)}_moveToPopup(t){const o=t.target.closest(".workout");if(!o)return;const e=o.dataset.id,n=this.workout.find((t=>t.id==e));this._moveToView(n.coords)}_moveToView(t){this.map.setView(t,this.zoomLevel,{pan:{duration:1}})}_setLocalStorage(){localStorage.setItem("workouts",JSON.stringify(this.workout))}}const app=new App;app._getPosition();
//# sourceMappingURL=index.823b7b38.js.map
