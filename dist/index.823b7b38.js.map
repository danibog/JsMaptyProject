{"mappings":"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","sources":["js/script.js"],"sourcesContent":["// const { map } = require(\"leaflet\");\r\n// \"use strict\";\r\n\r\nconst form = document.querySelector(\".form\");\r\nconst containerWorkouts = document.querySelector(\".workouts\");\r\nconst inputType = document.querySelector(\".form__input--type\");\r\nconst inputDistance = document.querySelector(\".form__input--distance\");\r\nconst inputDuration = document.querySelector(\".form__input--duration\");\r\nconst inputCadence = document.querySelector(\".form__input--cadence\");\r\nconst inputElevation = document.querySelector(\".form__input--elevation\");\r\n\r\nclass Workout {\r\n    date = new Date();\r\n    id = (Date.now() + \"\").slice(-10);\r\n\r\n    constructor(coords, distance, duration) {\r\n        this.coords = coords;\r\n        this.distance = distance;\r\n        this.duration = duration;\r\n    }\r\n\r\n    _setDescription() {\r\n        const months = [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\",\r\n        ];\r\n\r\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\r\n      months[this.date.getMonth()]\r\n    } ${this.date.getDate()}`;\r\n    }\r\n}\r\n\r\nclass Running extends Workout {\r\n    type = \"running\";\r\n    icon = \"🏃‍♂️\";\r\n    constructor(coords, distance, duration, cadence) {\r\n        super(coords, distance, duration);\r\n        this.cadence = cadence;\r\n        this.calcPace();\r\n        this._setDescription();\r\n    }\r\n\r\n    calcPace() {\r\n        this.pace = this.duration / this.distance;\r\n        return this.pace;\r\n    }\r\n}\r\nclass Cycling extends Workout {\r\n    icon = \"🚴‍♀️\";\r\n    type = \"cycling\";\r\n    constructor(coords, distance, duration, elevationGain) {\r\n        super(coords, distance, duration);\r\n        this.elevationGain = elevationGain;\r\n        this.calcSpeed();\r\n        this._setDescription();\r\n    }\r\n    calcSpeed() {\r\n        this.speed = this.distance / (this.duration / 60);\r\n        return this.speed;\r\n    }\r\n}\r\n\r\n/////////////////////////////////////\r\n////////////////////////////////////\r\n\r\nclass App {\r\n    mapEvent;\r\n    map;\r\n    workout = [];\r\n    zoomLevel = 13;\r\n\r\n    constructor() {\r\n        this._getPosition();\r\n        this._getLocalStorage();\r\n\r\n        form.addEventListener(\"submit\", this._newWorkout.bind(this));\r\n        inputType.addEventListener(\"change\", this._toggleElevationField);\r\n        containerWorkouts.addEventListener(\"click\", this._moveToPopup.bind(this));\r\n    }\r\n\r\n    _getLocalStorage() {\r\n        const data = JSON.parse(localStorage.getItem(\"workouts\"));\r\n        if (!data) return;\r\n\r\n        this.workout = data;\r\n        this.workout.forEach((work) => {\r\n            this._renderWorkout(work);\r\n            // this._renderWorkoutMarker(work);\r\n        });\r\n    }\r\n    _getPosition() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                this._loadMap.bind(this),\r\n                this._checkLocationOn.bind(this)\r\n            );\r\n        }\r\n    }\r\n    _checkLocationOn() {\r\n        alert(\"Could not get your postion\");\r\n\r\n        setTimeout(() => {\r\n            this._getPosition();\r\n        }, 2000);\r\n    }\r\n    _loadMap(position) {\r\n        // console.log(\"loaded\");\r\n        const { latitude, longitude } = position.coords;\r\n        const coords = [latitude, longitude];\r\n\r\n        this.map = L.map(\"map\").setView(coords, this.zoomLevel);\r\n\r\n        L.tileLayer(\"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\", {\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\r\n        }).addTo(this.map);\r\n\r\n        //handling clicks on map\r\n        this.map.on(\"click\", this._showForm.bind(this));\r\n        this.workout.forEach((work) => {\r\n            this._renderWorkoutMarker(work);\r\n        });\r\n    }\r\n    _showForm(e) {\r\n        this.mapEvent = e;\r\n\r\n        form.classList.remove(\"hidden\");\r\n        inputDistance.focus();\r\n    }\r\n    _hideForm() {\r\n        inputDistance.value =\r\n            inputElevation.value =\r\n            inputCadence.value =\r\n            inputDuration.value =\r\n            \"\";\r\n        form.style.display = \"none\";\r\n        setTimeout(() => {\r\n            form.style.display = \"grid\";\r\n        }, 1000);\r\n\r\n        form.classList.add(\"hidden\");\r\n    }\r\n\r\n    _toggleElevationField() {\r\n        inputElevation.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\r\n        inputCadence.closest(\".form__row\").classList.toggle(\"form__row--hidden\");\r\n    }\r\n\r\n    _newWorkout(e) {\r\n        const validInputs = (...inputs) =>\r\n            inputs.every((inp) => Number.isFinite(inp));\r\n\r\n        const allPositive = (...inputs) => inputs.every((inp) => inp > 0);\r\n\r\n        e.preventDefault();\r\n\r\n        //get data from input\r\n        const type = inputType.value;\r\n        const distance = +inputDistance.value;\r\n        const duration = +inputDuration.value;\r\n        const { lat, lng } = this.mapEvent.latlng;\r\n        const popLocation = [lat, lng];\r\n        let workout;\r\n\r\n        //check if data is valid and  // if activity running/cycling create running/cycling object\r\n\r\n        if (type == \"running\") {\r\n            const cadence = +inputCadence.value;\r\n\r\n            if (!validInputs(distance, duration, cadence) ||\r\n                !allPositive(distance, duration, cadence)\r\n            )\r\n                return alert(\"Inputs have to be positive number\");\r\n            workout = new Running(popLocation, distance, duration, cadence);\r\n        }\r\n\r\n        if (type == \"cycling\") {\r\n            const elevationGain = +inputElevation.value;\r\n            if (!validInputs(distance, duration, elevationGain) ||\r\n                !allPositive(distance, duration)\r\n            )\r\n                return alert(\"Inputs have to be positive number\");\r\n            workout = new Cycling(popLocation, distance, duration, elevationGain);\r\n        }\r\n\r\n        this.workout.push(workout);\r\n\r\n        this._renderWorkoutMarker(workout);\r\n\r\n        this._renderWorkout(workout);\r\n\r\n        this._moveToView(workout.coords, this.zoomLevel);\r\n\r\n        this._hideForm();\r\n\r\n        this._setLocalStorage();\r\n    }\r\n    _renderWorkoutMarker(workout) {\r\n        const popOption = {\r\n            maxWidth: 250,\r\n            minWidth: 100,\r\n            autoClose: false,\r\n            closeOnClick: false,\r\n            className: `${workout.type}-popup`,\r\n        };\r\n\r\n        L.marker(workout.coords)\r\n            .addTo(this.map)\r\n            .bindPopup(L.popup(popOption))\r\n            .setPopupContent(`${workout.icon} ${workout.description}`)\r\n            .openPopup();\r\n    }\r\n    _renderWorkout(workout) {\r\n        let html;\r\n\r\n        html = ` <li class=\"workout workout--${workout.type}\" data-id=${workout.id}>\r\n        <h2 class=\"workout__title\">${workout.description}</h2>\r\n        <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">${workout.icon} </span>\r\n            <span class=\"workout__value\">${workout.distance}</span>\r\n            <span class=\"workout__unit\">km</span>\r\n        </div>\r\n        <div class=\"workout__details\">\r\n            <span class=\"workout__icon\">⏱</span>\r\n            <span class=\"workout__value\">${workout.duration}</span>\r\n            <span class=\"workout__unit\">min</span>\r\n        </div>`;\r\n\r\n        if (workout.type == \"running\") {\r\n            html += `<div class=\"workout__details\">\r\n                <span class=\"workout__icon\">⚡️</span>\r\n                <span class=\"workout__value\">${workout.pace.toFixed(1)}\r\n                </span>\r\n                <span class=\"workout__unit\">min/km</span>\r\n            </div>\r\n            <div class=\"workout__details\">\r\n                <span class=\"workout__icon\">🦶🏼</span>\r\n                <span class=\"workout__value\">${workout.cadence}</span>\r\n                <span class=\"workout__unit\">spm</span>\r\n            </div>\r\n        </li>\r\n        `;\r\n        }\r\n\r\n        if (workout.type == \"cycling\") {\r\n            html += `\r\n            <div class=\"workout__details\">\r\n                <span class=\"workout__icon\">⚡️</span>\r\n                <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\r\n                <span class=\"workout__unit\">km/h</span>\r\n            </div>\r\n            <div class=\"workout__details\">\r\n                <span class=\"workout__icon\">⛰</span>\r\n                <span class=\"workout__value\">${workout.elevationGain}</span>\r\n                <span class=\"workout__unit\">min</span>\r\n            </div>\r\n        </li>`;\r\n        }\r\n\r\n        form.insertAdjacentHTML(\"afterend\", html);\r\n    }\r\n    _moveToPopup(e) {\r\n        const workoutEl = e.target.closest(\".workout\");\r\n        if (!workoutEl) return;\r\n        const id = workoutEl.dataset.id;\r\n\r\n        const selectedWorkout = this.workout.find((elem) => elem.id == id);\r\n        this._moveToView(selectedWorkout.coords);\r\n    }\r\n    _moveToView(pos) {\r\n        const option = {\r\n            pan: {\r\n                duration: 1,\r\n            },\r\n        };\r\n        this.map.setView(pos, this.zoomLevel, option);\r\n\r\n        // async function wait(sec) {\r\n        //     return new Promise((res) => setTimeout(res, sec));\r\n        // }\r\n        // wait(500).then(() => {\r\n        //     this.map.setView(pos, this.zoomLevel+1, option)\r\n        // })\r\n    }\r\n\r\n    _setLocalStorage() {\r\n        localStorage.setItem(\"workouts\", JSON.stringify(this.workout));\r\n    }\r\n}\r\n\r\nconst app = new App();\r\napp._getPosition();"],"names":["form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","Workout","date","Date","id","now","slice","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","Running","icon","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","App","mapEvent","map","workout","zoomLevel","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","data","JSON","parse","localStorage","getItem","forEach","work","_renderWorkout","navigator","geolocation","getCurrentPosition","_loadMap","_checkLocationOn","alert","setTimeout","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","_renderWorkoutMarker","e","classList","remove","focus","_hideForm","value","style","display","add","closest","toggle","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","popLocation","push","_moveToView","_setLocalStorage","popOption","maxWidth","minWidth","autoClose","closeOnClick","className","marker","bindPopup","popup","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","dataset","selectedWorkout","find","elem","pos","pan","setItem","stringify","app"],"version":3,"file":"index.823b7b38.js.map"}